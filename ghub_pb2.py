# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ghub.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='ghub.proto',
  package='ghub',
  syntax='proto3',
  serialized_pb=_b('\n\nghub.proto\x12\x04ghub\"4\n\nClientInfo\x12\n\n\x02ip\x18\x01 \x01(\t\x12\x0c\n\x04port\x18\x02 \x01(\x05\x12\x0c\n\x04name\x18\x03 \x01(\t\"R\n\x08\x43\x61llInfo\x12\x0b\n\x03\x64st\x18\x01 \x01(\t\x12\x0b\n\x03typ\x18\x02 \x01(\x05\x12\x0e\n\x06\x65ntity\x18\x03 \x01(\t\x12\x0e\n\x06method\x18\x04 \x01(\t\x12\x0c\n\x04\x61rgs\x18\x05 \x01(\x0c\"\x1a\n\x0bReturnState\x12\x0b\n\x03ret\x18\x01 \x01(\x05\x32r\n\nGHubServer\x12\x31\n\x08Register\x12\x10.ghub.ClientInfo\x1a\x11.ghub.ReturnState\"\x00\x12\x31\n\nRemoteCall\x12\x0e.ghub.CallInfo\x1a\x11.ghub.ReturnState\"\x00\x32@\n\nGHubClient\x12\x32\n\x0b\x46orwardCall\x12\x0e.ghub.CallInfo\x1a\x11.ghub.ReturnState\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_CLIENTINFO = _descriptor.Descriptor(
  name='ClientInfo',
  full_name='ghub.ClientInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ip', full_name='ghub.ClientInfo.ip', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='port', full_name='ghub.ClientInfo.port', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='ghub.ClientInfo.name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=20,
  serialized_end=72,
)


_CALLINFO = _descriptor.Descriptor(
  name='CallInfo',
  full_name='ghub.CallInfo',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dst', full_name='ghub.CallInfo.dst', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='typ', full_name='ghub.CallInfo.typ', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='entity', full_name='ghub.CallInfo.entity', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='method', full_name='ghub.CallInfo.method', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='args', full_name='ghub.CallInfo.args', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=74,
  serialized_end=156,
)


_RETURNSTATE = _descriptor.Descriptor(
  name='ReturnState',
  full_name='ghub.ReturnState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ret', full_name='ghub.ReturnState.ret', index=0,
      number=1, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=158,
  serialized_end=184,
)

DESCRIPTOR.message_types_by_name['ClientInfo'] = _CLIENTINFO
DESCRIPTOR.message_types_by_name['CallInfo'] = _CALLINFO
DESCRIPTOR.message_types_by_name['ReturnState'] = _RETURNSTATE

ClientInfo = _reflection.GeneratedProtocolMessageType('ClientInfo', (_message.Message,), dict(
  DESCRIPTOR = _CLIENTINFO,
  __module__ = 'ghub_pb2'
  # @@protoc_insertion_point(class_scope:ghub.ClientInfo)
  ))
_sym_db.RegisterMessage(ClientInfo)

CallInfo = _reflection.GeneratedProtocolMessageType('CallInfo', (_message.Message,), dict(
  DESCRIPTOR = _CALLINFO,
  __module__ = 'ghub_pb2'
  # @@protoc_insertion_point(class_scope:ghub.CallInfo)
  ))
_sym_db.RegisterMessage(CallInfo)

ReturnState = _reflection.GeneratedProtocolMessageType('ReturnState', (_message.Message,), dict(
  DESCRIPTOR = _RETURNSTATE,
  __module__ = 'ghub_pb2'
  # @@protoc_insertion_point(class_scope:ghub.ReturnState)
  ))
_sym_db.RegisterMessage(ReturnState)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class GHubServerStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Register = channel.unary_unary(
        '/ghub.GHubServer/Register',
        request_serializer=ClientInfo.SerializeToString,
        response_deserializer=ReturnState.FromString,
        )
    self.RemoteCall = channel.unary_unary(
        '/ghub.GHubServer/RemoteCall',
        request_serializer=CallInfo.SerializeToString,
        response_deserializer=ReturnState.FromString,
        )


class GHubServerServicer(object):

  def Register(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RemoteCall(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GHubServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Register': grpc.unary_unary_rpc_method_handler(
          servicer.Register,
          request_deserializer=ClientInfo.FromString,
          response_serializer=ReturnState.SerializeToString,
      ),
      'RemoteCall': grpc.unary_unary_rpc_method_handler(
          servicer.RemoteCall,
          request_deserializer=CallInfo.FromString,
          response_serializer=ReturnState.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ghub.GHubServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaGHubServerServicer(object):
  def Register(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def RemoteCall(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaGHubServerStub(object):
  def Register(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  Register.future = None
  def RemoteCall(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  RemoteCall.future = None


def beta_create_GHubServer_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('ghub.GHubServer', 'Register'): ClientInfo.FromString,
    ('ghub.GHubServer', 'RemoteCall'): CallInfo.FromString,
  }
  response_serializers = {
    ('ghub.GHubServer', 'Register'): ReturnState.SerializeToString,
    ('ghub.GHubServer', 'RemoteCall'): ReturnState.SerializeToString,
  }
  method_implementations = {
    ('ghub.GHubServer', 'Register'): face_utilities.unary_unary_inline(servicer.Register),
    ('ghub.GHubServer', 'RemoteCall'): face_utilities.unary_unary_inline(servicer.RemoteCall),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_GHubServer_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('ghub.GHubServer', 'Register'): ClientInfo.SerializeToString,
    ('ghub.GHubServer', 'RemoteCall'): CallInfo.SerializeToString,
  }
  response_deserializers = {
    ('ghub.GHubServer', 'Register'): ReturnState.FromString,
    ('ghub.GHubServer', 'RemoteCall'): ReturnState.FromString,
  }
  cardinalities = {
    'Register': cardinality.Cardinality.UNARY_UNARY,
    'RemoteCall': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'ghub.GHubServer', cardinalities, options=stub_options)


class GHubClientStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ForwardCall = channel.unary_unary(
        '/ghub.GHubClient/ForwardCall',
        request_serializer=CallInfo.SerializeToString,
        response_deserializer=ReturnState.FromString,
        )


class GHubClientServicer(object):

  def ForwardCall(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GHubClientServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ForwardCall': grpc.unary_unary_rpc_method_handler(
          servicer.ForwardCall,
          request_deserializer=CallInfo.FromString,
          response_serializer=ReturnState.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ghub.GHubClient', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaGHubClientServicer(object):
  def ForwardCall(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaGHubClientStub(object):
  def ForwardCall(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  ForwardCall.future = None


def beta_create_GHubClient_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('ghub.GHubClient', 'ForwardCall'): CallInfo.FromString,
  }
  response_serializers = {
    ('ghub.GHubClient', 'ForwardCall'): ReturnState.SerializeToString,
  }
  method_implementations = {
    ('ghub.GHubClient', 'ForwardCall'): face_utilities.unary_unary_inline(servicer.ForwardCall),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_GHubClient_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('ghub.GHubClient', 'ForwardCall'): CallInfo.SerializeToString,
  }
  response_deserializers = {
    ('ghub.GHubClient', 'ForwardCall'): ReturnState.FromString,
  }
  cardinalities = {
    'ForwardCall': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'ghub.GHubClient', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
